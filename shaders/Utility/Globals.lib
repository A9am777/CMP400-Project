#ifndef GLOBALS_H
#define GLOBALS_H

// Remove the need to transpose
#pragma pack_matrix( row_major )

#define IDENTITY_MAT float4x4(1., .0, .0, .0, .0, 1., .0, .0, .0, .0, 1., .0, .0, .0, .0, 1.)
#define ONE_MAT float4x4(1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.)
#define FILL_MAT(n) float4x4(n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n)

#define ONE_VEC float4(1., 1., 1., 1.)
#define ZERO_VEC float4(.0, .0, .0, .0)
#define FILL_VEC(n) float4(n, n, n, n)

static float PI = radians(180.);
static float EULER = exp(.0);

// Returns a blend value for if the position is inside extents (utilising fuzzy logic)
float insideBox3D(float3 pos, float3 min, float3 max)
{
  pos = step(min, pos) * step(pos, max);
  return all(pos);
}

// Returns a blend value for if the position is outside extents (utilising fuzzy logic)
float outsideBox3D(float3 pos, float3 min, float3 max)
{
  pos = step(pos, min) + step(max, pos);
  return any(pos);
}

#endif