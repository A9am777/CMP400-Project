#include "../Utility/MeshCommon.lib"
#include "../Lighting/GBuffer.lib"

struct InputType
{
  float4 position : SV_POSITION;
  float4 screenPosition : POSITION0; // Actually normalised dev coords
  float2 uv : TEXCOORD0;
  float3 normal : NORMAL;
  float3 worldPosition : POSITION1;
};

Texture2D normalDepthTexture : register(t0);
SamplerState sampler0 : register(s0);

// Converts [-1, 1] to [0, 1]
float signedToNorm(float norm)
{
  return norm * .5 + .5;
}

// Converts from screen space to texel space
float2 screenToTexel(float2 screenspace)
{
  return float2(signedToNorm(screenspace.x), signedToNorm(-screenspace.y));
}

// This shader masks the backface of a bounding box and additively blends the extreme depth
float4 main(InputType input) : SV_Target
{
  // Additive, combat initial undefined -ve value
  float4 output = float4(.0, 1., .0, 1.);
  
  // Either the existing depth or bound extremity
  output.y += min(input.screenPosition.z, normalDepthTexture.Sample(sampler0, screenToTexel(input.screenPosition.xy)).w);
  
  // It is beneficial to utilise a rasterized screen position for raymarching
  // (this shader always passes so this operation is performed here over the front facing pass)
  output.z = input.screenPosition.x;
  output.w = signedToNorm(input.screenPosition.y) + 1.; // Pack to bypass alpha test
  
  return output;
}